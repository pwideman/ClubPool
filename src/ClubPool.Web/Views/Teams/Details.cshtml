@model ClubPool.Web.Controllers.Teams.DetailsViewModel

@{
    ViewBag.Title = "Team Details";
}

@if (Model.CanUpdateName) {
  using (var form = Html.BeginForm("UpdateName", "Teams", FormMethod.Post, new { id = "update_name_form" })) {
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.Id)
    <p><input type="text" id="name" name="name" class="team-name required" size="30" value="@Model.Name" title="Click to edit team name, enter or tab out to save"/></p>
  }
} else {
  <h4>@Model.Name</h4>
}
<p class="team-details-email">
  @Html.ContentImage("mail-medium.png", "Email " + Model.Name)
  <a href="mailto:@Model.Email">Send @Model.Name an email</a>
</p>
<div class="container">
  <div class="header">Details</div>
  <div class="content">
    <ul id="team-details">
      <li>
        Players:
        <ul>
          @foreach (var player in Model.Players) {
            <li>@Html.ActionLink(string.Format("{0} ({1})", player.Name, player.EightBallSkillLevel), "Details", "Users", new { id = player.Id}, null)</li>
          }
        </ul>
      </li>
      <li>Record: @Model.Record</li>
      <li>Division Ranking: @Model.Rank</li>
    </ul>
  </div>
</div>
<br/>
@if (Model.HasSeasonResults) {
<div class="container">
  <div class="header">Season Results</div>
  <div class="content">
    <table id="season-results-table">
      <thead>
        <tr>
          <th>Opponent</th>
          <th>Player</th>
          <th>Wins</th>
          <th>Player</th>
          <th>Wins</th>
          <th>Result</th>
        </tr>
      </thead>
      <tbody class="meet">        
      @foreach (var match in Model.SeasonResults) {
        <tr @Html.Raw(match.Win ? "class=\"winner\"" : "")>
          <td>@match.OpponentTeamName</td>
          <td>@match.OpponentPlayerName</td>
          <td>@match.OpponentPlayerWins</td>
          <td>@match.TeamPlayerName</td>
          <td>@match.TeamPlayerWins</td>
          <td>@(match.Win ? "W" : "L")</td>
        </tr>
      }
      </tbody>
    </table>
  </div>
</div>
}

@if (Model.CanUpdateName) {
@Html.ScriptInclude("jquery.form.js")

<script type="text/javascript">
  var currentTeamName = "@Model.Name";
  // declare formOpts explicitly, since we need to use it in two different places
  var formOpts = {
    success: function (response, status, xhr, form) {
      if (xhr.status === 200) {
        if (response.Success) {
          currentTeamName = $("#name").val();
          $("#name").effect("highlight", 1500);
        }
        else {
          $("#name").ajaxUpdateError({ message: response.Message });
          $("#name").val(currentTeamName);
        }
      }
    },
    error: function (xhr, status, error) {
      $("#name").ajaxUpdateError({ message: "An error occurred on the server while saving your changes, try again" });
    },
    beforeSubmit: function () {
      $log("beforeSubmit");
      var valid = $("#update_name_form").validate().form();
      $log("valid: " + valid);
      var different = $("#name").val() != currentTeamName;
      $log("different: " + different);
      var ret = valid && different;
      $log("returning: " + ret);
      $("#name").ajaxUpdateError("close");
      return ret;
    }
  };

  $(function () {
    // set up team name text box event handlers
    $("#name").blur(saveName).focus(function (e) {
      currentTeamName = $(this).val();
    });
    // create ajax form
    $("#update_name_form").ajaxForm(formOpts);

    // set up validation
    $("#update_name_form").validate({
      errorPlacement: function () { }
    });
  });

  function saveName() {
    $("#update_name_form").ajaxSubmit(formOpts);
  }
</script>
}

<script type="text/javascript">
  $(function () {
    // style table
    $("#season-results-table tbody:last").removeClass("meet").find("tr:last").addClass("last");
  });
</script>
